{"version":3,"sources":["components/AddMovie.module.css","components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","components/AddMovie.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","release","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","App","useState","dummyMovies","setDummyMovies","isLoading","setIsLoading","error","setError","useEffect","getMoviesList","useCallback","a","fetch","moviesList","ok","json","r","res","loadedMovies","push","console","log","movieData","movieBody","Math","random","method","body","JSON","stringify","headers","moviesListUpdated","unshift","content","length","MoviesList","Fragment","onClick","ReactDOM","render","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,QAAU,4B,qBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,iOCajBC,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,iBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAMS,QACnBN,YAAaH,EAAMG,mB,gBC6BdO,MAtCf,SAAkBb,GAChB,IAAMc,EAAWC,iBAAO,IAClBC,EAAiBD,iBAAO,IACxBE,EAAiBF,iBAAO,IAgB9B,OACE,0BAAMG,SAfR,SAAuBC,GACrBA,EAAMC,iBAIN,IAAMjB,EAAQ,CACZC,MAAOU,EAASO,QAAQC,MACxBhB,YAAaU,EAAeK,QAAQC,MACpCjB,YAAaY,EAAeI,QAAQC,OAGtCtB,EAAMuB,WAAWpB,KAKf,yBAAKF,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOf,GAAG,QAAQgB,IAAKb,KAErC,yBAAKb,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,gBAAf,gBACA,8BAAUG,KAAK,IAAIjB,GAAG,eAAegB,IAAKX,KAE5C,yBAAKf,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,QAAf,gBACA,2BAAOC,KAAK,OAAOf,GAAG,OAAOgB,IAAKV,KAEpC,+CCsDSY,MApFf,WACE,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAgBC,sBAAW,sBAAC,kCAAAC,EAAA,6DAChCN,GAAa,GACbE,EAAS,MAFuB,kBAILK,MAAM,wDAJD,YAIxBC,EAJwB,QAKfC,GALe,iCAMVD,EAAWE,OAND,OAQ5B,IAASC,KAFHC,EANsB,OAOtBC,EAAe,GACPD,EACZC,EAAaC,KAAKF,EAAID,IAExBb,EAAee,GAXa,8BAatB,IAAIZ,EAAM,yBAbY,QAe9BD,GAAa,GAfiB,kDAiB9BE,EAAS,EAAD,IACRF,GAAa,GACbe,QAAQC,IAAR,MAnB8B,0DAqB/B,IA9BU,4CAqCb,WAA+BC,GAA/B,iBAAAX,EAAA,6DACQY,EADR,2BACyBD,GADzB,IACoCxC,GAAoB,IAAhB0C,KAAKC,WAC3CpB,GAAa,GACbE,EAAS,MAHX,SAIoBK,MAAM,uDAAwD,CAC9Ec,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACP,eAAgB,sBARtB,eAWQC,EAXR,YAWgC7B,IACZ8B,QAAQT,GAC1BpB,EAAe4B,GACf1B,GAAa,GAdf,6CArCa,sBAsDb,IAAI4B,EAAU,+CAed,OAbI/B,EAAYgC,OAAS,IACvBD,EAAU,kBAACE,EAAD,CAAYxD,OAAQuB,KAG5BI,IACF2B,EAAU,2BAAI3B,IAGZF,IACF6B,EAAU,0CAKV,kBAAC,IAAMG,SAAP,KACE,iCACE,kBAAC,EAAD,CAAU1C,WAxEH,+CA0ET,iCACE,4BAAQ2C,QA3Ca,SAAC/C,GAC1BA,EAAMC,iBACNkB,MAyCI,iBAEF,iCACGwB,KC/ETK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ffced3f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__2ENNX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__27rBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__lMnXQ\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.release}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from 'react';\n\nimport classes from './AddMovie.module.css';\n\nfunction AddMovie(props) {\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='title'>Title</label>\n        <input type='text' id='title' ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='opening-text'>Opening Text</label>\n        <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='date'>Release Date</label>\n        <input type='text' id='date' ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n}\n\nexport default AddMovie;\n","import React, { useEffect, useState, useCallback } from 'react';\n\nimport './App.css';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\n\nfunction App() {\n  const [dummyMovies, setDummyMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getMoviesList();\n  }, []);\n\n  const getMoviesList = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const moviesList = await fetch('https://react-guide-9f34b.firebaseio.com/movies.json');\n      if (moviesList.ok) {\n        const res = await moviesList.json();\n        const loadedMovies = [];\n        for (let r in res) {\n          loadedMovies.push(res[r]);\n        }\n        setDummyMovies(loadedMovies);\n      } else {\n        throw new error('Something went wrong!')\n      }\n      setIsLoading(false);\n    } catch (error) {\n      setError(error);\n      setIsLoading(false);\n      console.log(error);\n    }\n  }, [])\n\n  const fetchMoviesHandler = (event) => {\n    event.preventDefault();\n    getMoviesList();\n  }\n\n  async function addMovieHandler(movieData) {\n    const movieBody = { ...movieData, id: Math.random() * 1000 };\n    setIsLoading(true);\n    setError(null);\n    const res = await fetch('https://react-guide-9f34b.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movieBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const moviesListUpdated = [...dummyMovies];\n    moviesListUpdated.unshift(movieBody);\n    setDummyMovies(moviesListUpdated);\n    setIsLoading(false);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (dummyMovies.length > 0) {\n    content = <MoviesList movies={dummyMovies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}